Strong Concatienation
	-doesnt have spaces
In checks if in
	- 'n' in fruit'
		*true
String comparison
	- < or > compares the position in the string
Lower case and methods in string library
	- greet.lower() -> lower case
type()
	-describes the type
dir()
	-names all the methods in the library
.find()
	-method that finds the position of the letter in the string
extracting a specific string set from a group of strings
	-"Hi my name is Daniel Brown."
		beginning_find = data.find('D')
			# returns the numbered element where 'D' is found
		10
		end_find= data.find('n')
			# returns the numbebered element where 'n' is found
		18
			# now we want to call back the element beginning to element end so we 				can extract the name from the string
		name = data[beginning_find : end_find]
			# returns the elements 10 - 18 or Daniel Brown
		Daniel Brown
\n is new line puts the next string element on a new line
open documents using open('file.name')
	-.read() prints the entire text as a string
.rstrp strips the white space at the end
continue skips to the next iteration in the loop
break stops the loop

When you dont wanna trust the user use a try and excpet block and your using an input
======================
Lists
======================
Concatenate
	-x = [1,5,6]   y=[6,4,8]
		#x+y = [1,5,6,6,4,8]
Append- add elements to the end of a vector
	-stuff=[1,3,cars,poo]
		#stuff.append('can') = [1,3,cars,poo,can]

Splitting list in a loop
	-abc = 'There is a no war in Ba Sing Sai'
	-stuff= abc.split() # =['There','is','no'...]
	-for  n in stuff
		do action
	-split(';') # instead of splitting at a white space it splits at ';'


# Opens file
fname = input("Enter file name: ")
fh = open(fname)

# Intiliazes a list
lst = list()
#print(lst)

# checks for each line of text in the file
for line in fh:
    pieces=line.split() # splits the lines into individual string elements in a vector
    for i in range(len(pieces)): # for each element in the range of the length of vector
        if pieces[i] in lst: # if the element is in the list already continue
            continue
        else:
            lst.append(pieces[i]) # if not add it to the list
lst.sort() # sort it from capital letters and then alphabetically
print(lst)




